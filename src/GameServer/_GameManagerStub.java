package GameServer;


/**
* GameServer/_GameManagerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from GameManagerIDL.idl
* Quarta-feira, 28 de Junho de 2017 00h39min39s BRT
*/

public class _GameManagerStub extends org.omg.CORBA.portable.ObjectImpl implements GameServer.GameManager
{

  public GameServer.Player enterOnMatch (GameServer.ServerListener listener) throws GameServer.CrowdedRoom
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("enterOnMatch", true);
                GameServer.ServerListenerHelper.write ($out, listener);
                $in = _invoke ($out);
                GameServer.Player $result = GameServer.PlayerHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:GameServer/CrowdedRoom:1.0"))
                    throw GameServer.CrowdedRoomHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return enterOnMatch (listener        );
            } finally {
                _releaseReply ($in);
            }
  } // enterOnMatch

  public void leaveMatch (String playerName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("leaveMatch", true);
                $out.write_string (playerName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                leaveMatch (playerName        );
            } finally {
                _releaseReply ($in);
            }
  } // leaveMatch

  public GameServer.Player currentPlayer ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("currentPlayer", true);
                $in = _invoke ($out);
                GameServer.Player $result = GameServer.PlayerHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return currentPlayer (        );
            } finally {
                _releaseReply ($in);
            }
  } // currentPlayer

  public void startNewTurn ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startNewTurn", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startNewTurn (        );
            } finally {
                _releaseReply ($in);
            }
  } // startNewTurn

  public void finishTurnOf (String playerName, int rightHandPicks, int turnShot)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("finishTurnOf", true);
                $out.write_string (playerName);
                $out.write_long (rightHandPicks);
                $out.write_long (turnShot);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                finishTurnOf (playerName, rightHandPicks, turnShot        );
            } finally {
                _releaseReply ($in);
            }
  } // finishTurnOf

  public boolean isAValidTurnShot (String playerName, int shot)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isAValidTurnShot", true);
                $out.write_string (playerName);
                $out.write_long (shot);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isAValidTurnShot (playerName, shot        );
            } finally {
                _releaseReply ($in);
            }
  } // isAValidTurnShot

  public GameServer.Player playerData (String playerName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("playerData", true);
                $out.write_string (playerName);
                $in = _invoke ($out);
                GameServer.Player $result = GameServer.PlayerHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return playerData (playerName        );
            } finally {
                _releaseReply ($in);
            }
  } // playerData

  public GameServer.Player[] playersInfo ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("playersInfo", true);
                $in = _invoke ($out);
                GameServer.Player $result[] = GameServer.PlayersHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return playersInfo (        );
            } finally {
                _releaseReply ($in);
            }
  } // playersInfo

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:GameServer/GameManager:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _GameManagerStub
