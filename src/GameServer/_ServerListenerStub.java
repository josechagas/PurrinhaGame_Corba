package GameServer;


/**
* GameServer/_ServerListenerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from GameManagerIDL.idl
* Quarta-feira, 28 de Junho de 2017 00h39min39s BRT
*/

public class _ServerListenerStub extends org.omg.CORBA.portable.ObjectImpl implements GameServer.ServerListener
{

  public void newPlayerOnMatch (GameServer.Player player, GameServer.Player[] allPlayers)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("newPlayerOnMatch", true);
                GameServer.PlayerHelper.write ($out, player);
                GameServer.PlayersHelper.write ($out, allPlayers);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                newPlayerOnMatch (player, allPlayers        );
            } finally {
                _releaseReply ($in);
            }
  } // newPlayerOnMatch

  public void showUpdatesOfPlayers (GameServer.Player[] players)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("showUpdatesOfPlayers", true);
                GameServer.PlayersHelper.write ($out, players);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                showUpdatesOfPlayers (players        );
            } finally {
                _releaseReply ($in);
            }
  } // showUpdatesOfPlayers

  public void startOfTurn (GameServer.Player[] players)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("startOfTurn", true);
                GameServer.PlayersHelper.write ($out, players);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                startOfTurn (players        );
            } finally {
                _releaseReply ($in);
            }
  } // startOfTurn

  public void endOfTurn (GameServer.Player[] playersOnMatch, GameServer.Player[] winners, String turnWinnerName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("endOfTurn", true);
                GameServer.PlayersHelper.write ($out, playersOnMatch);
                GameServer.PlayersHelper.write ($out, winners);
                $out.write_string (turnWinnerName);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                endOfTurn (playersOnMatch, winners, turnWinnerName        );
            } finally {
                _releaseReply ($in);
            }
  } // endOfTurn

  public void gameOver (GameServer.Player[] winners, GameServer.Player loser)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("gameOver", true);
                GameServer.PlayersHelper.write ($out, winners);
                GameServer.PlayerHelper.write ($out, loser);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                gameOver (winners, loser        );
            } finally {
                _releaseReply ($in);
            }
  } // gameOver

  public void connectionLost (String playerName, GameServer.Player[] players)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("connectionLost", true);
                $out.write_string (playerName);
                GameServer.PlayersHelper.write ($out, players);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                connectionLost (playerName, players        );
            } finally {
                _releaseReply ($in);
            }
  } // connectionLost

  public void playerLeavingMatch (String playerName, GameServer.Player[] players)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("playerLeavingMatch", true);
                $out.write_string (playerName);
                GameServer.PlayersHelper.write ($out, players);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                playerLeavingMatch (playerName, players        );
            } finally {
                _releaseReply ($in);
            }
  } // playerLeavingMatch

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:GameServer/ServerListener:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _ServerListenerStub
